/*! cryptocurrency 2021-05-07 */
const _=require("lodash"),crypto=require("crypto"),{default:axios}=require("axios"),{ADDRESS_PREFIX,HTTP_METHODS,TYPE,TRANSACTION_FAMILY,LOCAL_ADDRESS}=require("../utils/constants"),{SEVERITY,logFormatted}=require("../utils/logger"),{queryState,sendTransaction}=require("../sawtooth/sawtooth-helpers"),Transaction=require("../models/Transaction"),User=require("../models/User"),Asset=require("../models/Asset"),hash512=s=>crypto.createHash("sha512").update(s).digest("hex"),getAddress=(s,e=64)=>hash512(s).slice(0,e),PREFIX=getAddress(TRANSACTION_FAMILY,6),getTransactionAddress=s=>PREFIX+ADDRESS_PREFIX.TRANSACTION+getAddress(s,62),getUserAddress=s=>PREFIX+ADDRESS_PREFIX.USER+getAddress(s,62),getTransferAddress=s=>PREFIX+ADDRESS_PREFIX.TRANSFER+getAddress(s,62),findByAddress=(e,s,t=!1,r=!1,a=null)=>{let n;switch(e){case TYPE.TRANSACTION:if(a&&a.locals&&a.locals.transaction&&a.locals.transaction[s])return Promise.resolve(new Transaction(a.locals.transaction[s]).toObject(t,r));n=getTransactionAddress(s);break;case TYPE.USER:if(a&&a.locals&&a.locals.user&&a.locals.user[s])return Promise.resolve(new User(a.locals.user[s]).toObject(t,r));n=getUserAddress(s);break;default:return Promise.resolve(null)}return queryState(n).then(s=>{if(!s)return null;switch(Array.isArray(s)&&(s=s.find(s=>s.address===n)),e){case TYPE.TRANSACTION:a&&a.locals&&(a.locals.transaction||(a.locals.transaction={}),a.locals.transaction[s.signature]=new Transaction(s)),s=new Transaction(s).toObject(t,r);break;case TYPE.USER:a&&a.locals&&(a.locals.user||(a.locals.user={}),a.locals.user[s.address]=new User(s)),s=new User(s).toObject(t,r);break;default:return null}return s})},findAllAssets=(t,e,s=20,r=!1,a=!1,n=null)=>{let o,d;switch(t){case TYPE.TRANSACTION:o="transaction",d=ADDRESS_PREFIX.TRANSACTION;break;case TYPE.USER:o="user",d=ADDRESS_PREFIX.USER}return axios.get(`${process.env.SAWTOOTH_REST||`http://${LOCAL_ADDRESS}:8008`}/state?address=${PREFIX+d}${0!==s?`&limit=${s}`:""}`,{headers:{"Content-Type":"application/json"}}).then(s=>{s=_.chain(s.data.data).filter(s=>!_.isEmpty(JSON.parse(Buffer.from(s.data,"base64")))).map(s=>{let e=JSON.parse(Buffer.from(s.data,"base64"));switch(_.isEmpty(e)&&(e=null),t){case TYPE.TRANSACTION:return n&&(n.locals.transaction||(n.locals.transaction={}),n.locals.transaction[e.address]=new Transaction(e)),new Transaction(e).toObject(r,a);case TYPE.USER:return n&&(n.locals.user||(n.locals.user={}),n.locals.user[e.address]=new User(e)),new User(e).toObject(r,a)}}).flatten().value();return logFormatted(`${e} | Querying all ${o}s - ${s.length} ${o}${1!==s.length?"s":""} found`,0===s.length?SEVERITY.ERROR:SEVERITY.SUCCESS),s})},buildBatch=({inputs:s,outputs:e,payload:t},...r)=>{let a=[new Asset({inputs:s,outputs:e,payload:t})];return(r||[]).forEach(s=>a.push(buildBatch(s))),[].concat.apply([],a)},_putAsset=(s,r,a,e)=>{let n,t,o,d;switch(s){case TYPE.TRANSACTION:d="Transaction",t=e.signature,n=e.toString(!1,!1),o=getTransactionAddress(t);break;case TYPE.USER:d="User",t=e.address,n=e.toString(!0,!1),o=getUserAddress(t);break;case TYPE.TRANSFER:d="Transfer"}s=JSON.stringify({func:r.toLowerCase(),args:{transaction:n,txid:t}}),s=buildBatch({payload:s,inputs:[o],outputs:[o]});return logFormatted(`${a} | BATCH Request:`,SEVERITY.NOTIFY,...s),sendTransaction(s).then(s=>{logFormatted(`${a}  | BATCH Response: ${s.status} - ${s.statusText}`,SEVERITY.SUCCESS);var e=r===HTTP_METHODS.POST?201:200,s=`${d} ${r===HTTP_METHODS.POST?"created":"updated"}`;const t=JSON.parse(n);return delete t.type,{responseCode:e,msg:s,payload:t}})},buildAssetTransaction=(s,e,t)=>{let r,a,n;switch(s){case TYPE.TRANSACTION:a=t.signature,r=t.toString(!1,!1),n=getTransactionAddress(a);break;case TYPE.USER:a=t.address,r=t.toString(!0,!1),n=getUserAddress(a);break;case TYPE.TRANSFER:}e=JSON.stringify({func:e.toLowerCase(),args:{transaction:r,txid:a}});return new Asset({payload:e,inputs:[n],outputs:[n]})},putBatch=(r,a,n)=>{const o=buildBatch(...n);return logFormatted(`${a} | BATCH Request:`,SEVERITY.NOTIFY,...o),sendTransaction(o).then(s=>{logFormatted(`${a} | BATCH Response: ${s.status} - ${s.statusText}`,SEVERITY.SUCCESS);var e=r===HTTP_METHODS.POST?201:200,s=`Batch of ${n.length} transaction${1<n.length?"s":""} ${r===HTTP_METHODS.POST?"created":"updated"}`;const t=[];return o.forEach(s=>{const e=JSON.parse(s.payload);delete e.type,t.push(e)}),{responseCode:e,msg:s,payload:t}})},putAsset=(s,e,t,r,a)=>{let n;switch(s){case TYPE.TRANSACTION:n=new Transaction(r.body).toString(!1,!1);break;case TYPE.USER:n=new User(r.body)}return _putAsset(s,e,t,n).then(({responseCode:s,msg:e,payload:t})=>a.status(s).json({msg:e,payload:t})).catch(s=>(logFormatted(`${t} | BATCH Response: ${s}`,SEVERITY.ERROR),a.status(500).json({err:s})))};module.exports.hash512=hash512,module.exports.getTransactionAddress=getTransactionAddress,module.exports.getUserAddress=getUserAddress,module.exports.getTransferAddress=getTransferAddress,module.exports.findByAddress=findByAddress,module.exports.findAllAssets=findAllAssets,module.exports._putAsset=_putAsset,module.exports.buildAssetTransaction=buildAssetTransaction,module.exports.putBatch=putBatch,module.exports.putAsset=putAsset;