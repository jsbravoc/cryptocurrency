const{SEVERITY,logFormatted}=require("../utils/logger"),{HTTP_METHODS,TYPE}=require("../utils/constants"),{findAllAssets,findByAddress,putAsset,_putAsset,hash512}=require("./common"),{expandSupportingTransactions,findTransaction,createTransaction}=require("./cryptocurrency"),Transaction=require("../models/Transaction"),{ERRORS}=require("../utils/errors"),findUser=(s,e=!0,r=!0,t=null)=>findByAddress(TYPE.USER,s,e,r,t),_updateUser=(s,t,e="[LOCAL USER UPDATE]")=>_putAsset(TYPE.USER,HTTP_METHODS.PUT,e,s).then(({responseCode:s,msg:e,payload:r})=>t.status(s).json({msg:e,payload:r})),getUsers=(s,n)=>{var e=Number.isNaN(Number(s.query.limit))?0:Number(s.query.limit);const r=[findAllAssets(TYPE.USER,"GET /users",e,!0,!0,n)],a="true"===s.query.expanded||!1;return a&&r.push(findAllAssets(TYPE.TRANSACTION,"GET /users",e,!1,!0,n)),Promise.all(r).then(([s,e])=>{if(!a)return n.status(200).json(s);const r={};(e||[]).forEach(s=>{r[s.signature]=s});let t=[];return(s||[]).forEach(s=>{t.push((s.latest_transactions||[]).map(s=>findTransaction(s).then(s=>expandSupportingTransactions(s,r)))),t.push((s.pending_transactions||[]).map(s=>findTransaction(s).then(s=>expandSupportingTransactions(s,r))))}),t=[].concat.apply([],t),{promises:t,userList:s}}).then(({promises:s,userList:e})=>{Array.isArray(s)&&Promise.all(s).then(s=>{(s||[]).forEach(t=>{e.forEach(s=>{var e=(s.latest_transactions||[]).indexOf(t.signature),r=(s.pending_transactions||[]).indexOf(t.signature);-1<e&&(s.latest_transactions[e]=t),-1<r&&(s.pending_transactions[r]=t)})});Promise.all([]).then(()=>n.status(200).json(e))})}).catch(()=>n.status(ERRORS.SAWTOOTH.UNAVAILABLE.errorCode).json({msg:s.t("MESSAGES.SAWTOOTH_UNAVAILABLE"),error:s.t("MESSAGES.SAWTOOTH_UNAVAILABLE")}))},getUserByAddress=(s,n)=>findUser(s.params.address,!0,!0,n).then(t=>{return"true"!==s.query.expanded?n.status(200).json(t):findAllAssets(TYPE.TRANSACTION,"GET /users",0,!1,!0,n).then(s=>{let e=[];const r={};return(s||[]).forEach(s=>{r[s.signature]=s}),e.push((t.latest_transactions||[]).map(s=>findTransaction(s).then(s=>expandSupportingTransactions(s,r)))),e.push((t.pending_transactions||[]).map(s=>findTransaction(s).then(s=>expandSupportingTransactions(s,r)))),e=[].concat.apply([],e),Promise.all(e).then(s=>(s.forEach(s=>{var e=(t.latest_transactions||[]).indexOf(s.signature),r=(t.pending_transactions||[]).indexOf(s.signature);-1<e&&(t.latest_transactions[e]=s),-1<r&&(t.pending_transactions[r]=s)}),n.status(200).json(t)))})}),createUser=(s,e)=>putAsset(TYPE.USER,HTTP_METHODS.POST,"POST /users",s,e),updateUser=(a,o)=>findUser(a.params.address,!0,!0,o).then(s=>{var{role:e,description:r,permissions:t,return_to:n}=a.body;return e&&(s.role=e),r&&(s.description=r),t&&(s.permissions=t),n&&(s.return_to=n),_updateUser(s,o,"PUT /users")}),deleteUser=(n,a)=>{const o=n.body.reason;return findUser(n.params.address,!0,!0,a).then(r=>{const t=r.return_to[o],e=[];return(r.latest_transactions||[]).forEach(s=>{e.push(findTransaction(s))}),Promise.all(e).then(s=>{let e=0;(s||[]).forEach(s=>{e+=s.amount});s=new Transaction({amount:e,recipient:t,sender:n.params.address,description:`Resulting transaction of user's return_to ${o}`,signature:hash512(`${r.public_key},${e},${o},${t},${(new Date).toISOString()}`)});return n.body=s,r.active=!1,createTransaction(n,a,{disableSender:!0})})})};module.exports.getUserHistory=async function(){},module.exports.findUser=findUser,module.exports.getUsers=getUsers,module.exports.getUserByAddress=getUserByAddress,module.exports.createUser=createUser,module.exports.updateUser=updateUser,module.exports.deleteUser=deleteUser;