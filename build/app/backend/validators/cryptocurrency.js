const{body}=require("express-validator"),{TYPE}=require("../utils/constants"),{ERRORS}=require("../utils/errors"),{validate,createError,validateAssetExistence,createErrorObj}=require("./common"),{findByAddress}=require("../controllers/common"),Transaction=require("../models/Transaction"),{MAXIMUM_FLOAT_PRECISION}=require("../utils/constants"),{getPublicKey}=require("../utils/signature"),{createAddress}=require("../controllers/cryptocurrency"),inputValidation=validate([body("recipient").notEmpty().withMessage((r,{req:e})=>createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.MISSING_REQUIRED_INPUT,params:{propertyName:"recipient",value:r,param:"recipient"}})).trim().bail(),body("amount").notEmpty().isFloat({gt:0}).toFloat().withMessage((r,{req:e})=>createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.INCORRECT_INPUT,params:{propertyName:"amount",value:r,param:"amount"}})).bail(),body("amount").customSanitizer(r=>{if(r)return Number(r.toFixed(MAXIMUM_FLOAT_PRECISION))}),body("signature").notEmpty().withMessage((r,{req:e})=>createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.MISSING_REQUIRED_INPUT,params:{propertyName:"signature",value:r,param:"signature"}})).trim().bail(),body("sender").optional({checkFalsy:!0,checkNull:!0}).trim(),body("creator").optional({checkFalsy:!0,checkNull:!0}).trim(),body("valid_thru").optional({checkFalsy:!0,checkNull:!0}).isISO8601().toDate().withMessage((r,{req:e})=>createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.INCORRECT_INPUT,params:{propertyName:"valid_thru",value:r,param:"valid_thru"}})).bail(),body("creationDate").optional({checkFalsy:!0,checkNull:!0}).isISO8601().toDate().withMessage((r,{req:e})=>createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.INCORRECT_INPUT,params:{propertyName:"creationDate",value:r,param:"creationDate"}})).bail(),body("supporting_transactions").customSanitizer(()=>{}),body("valid_thru").custom((r,{req:e})=>!(r&&new Date(r)<new Date)||Promise.reject(createErrorObj(e,{error:ERRORS.TRANSACTION.INPUT.INCORRECT_INPUT,params:{propertyName:"valid_thru",value:r,param:"valid_thru"}}))),body("valid").customSanitizer((r,{req:e})=>(null===e.body.pending||void 0===e.body.pending||!0!==e.body.pending&&"true"!==e.body.pending)&&r),body("pending").optional({checkNull:!0}).toBoolean(),body("valid").optional({checkNull:!0}).toBoolean()]),validateExistingTransaction=(r,e,a,t,o,{location:s="body"}=null)=>validateAssetExistence(TYPE.TRANSACTION,t,o,r,e,{location:s}).then(()=>{a()}).catch(r=>r()),verifyPostTransaction=(n,i,d)=>{const r=[findByAddress(TYPE.USER,n.body.recipient,!1,i)];return n.body.sender&&r.push(findByAddress(TYPE.USER,n.body.sender,!1,i)),Promise.all(r).then(([r,s])=>{if(r){if(r&&!1===r.active)return createError(n,i,{error:ERRORS.USER.LOGIC.USER_IS_NOT_ACTIVE,params:{address:r.address,param:"recipient",value:n.body.recipient}});if(n.body.sender&&!s)return createError(n,i,{error:ERRORS.USER.INPUT.USER_DOES_NOT_EXIST,params:{address:n.body.sender,param:"sender",value:n.body.sender}});if(s&&!1===s.active)return createError(n,i,{error:ERRORS.USER.LOGIC.USER_IS_NOT_ACTIVE,params:{address:s.address,param:"sender",value:s.address}});if(s){if(s.permissions&&s.permissions.transfer_to&&!1===s.permissions.transfer_to[n.body.recipient])return createError(n,i,{error:ERRORS.USER.LOGIC.USER_DOES_NOT_HAVE_TRANSFER_PERMISSIONS,params:{address:n.body.sender,recipient:n.body.recipient,param:"sender",value:n.body.sender}});if(s.balance<n.body.amount)return createError(n,i,{error:ERRORS.USER.INPUT.INSUFFICIENT_FUNDS,params:{address:n.body.sender,param:"amount",value:n.body.sender}});{let t=n.body.amount,o=0;const e=[];return(s.latest_transactions||[]).forEach(r=>{e.push(findByAddress(TYPE.TRANSACTION,r,!1,i).then(r=>{t-=r.amount,o+=r.amount}))}),Promise.all(e).then(()=>{const r=t;let e=0;const a=[];return(s.pending_transactions||[]).forEach(r=>{a.push(findByAddress(TYPE.TRANSACTION,r,!1,i).then(r=>{r.sender===n.body.sender&&r.creator===n.body.sender&&(e+=r.amount,t+=r.amount,o-=r.amount)}))}),Promise.all(a).then(()=>0<t&&t!==r?createError(n,i,{error:ERRORS.USER.INPUT.INSUFFICIENT_FUNDS_PENDING_TRANSACTIONS,params:{address:n.body.sender,param:"amount",value:n.body.sender,amountPending:e,actualBalance:o}}):d())})}}return r&&r.permissions&&!0!==r.permissions.coinbase?createError(n,i,{error:ERRORS.USER.LOGIC.USER_DOES_NOT_HAVE_PERMISSIONS,params:{address:n.body.recipient,param:"recipient",value:n.body.recipient,requiredPermission:"coinbase"}}):d()}return createError(n,i,{error:ERRORS.USER.INPUT.USER_DOES_NOT_EXIST,params:{address:n.body.recipient,param:"recipient",value:n.body.recipient}})})},validatePendingTransaction=async(e,a,t)=>{var{address:r}=e.params;return findByAddress(TYPE.TRANSACTION,r,!1,a).then(r=>r.pending?t():createError(e,a,{error:ERRORS.TRANSACTION.INPUT.TRANSACTION_IS_NOT_PENDING,params:{signature:e.params.address,param:"address",value:e.params.address}}))},validateTransactionAddress=[(r,e,a)=>validateExistingTransaction(r,e,a,r.params.address,!0,{location:"params"})],validateTransactionSignature=(e,a,t)=>{if("true"===process.env.DISABLE_INTEGRITY_VALIDATION)return t();var{creator:r,sender:o,recipient:s,signature:n}=e.body,i=new Transaction(e.body).toSignatureString();const d=getPublicKey(i,n);return d?findByAddress(TYPE.USER,r||o||s,!1,a).then(r=>r.public_key!==d?createError(e,a,{error:ERRORS.TRANSACTION.LOGIC.NON_MATCHING_KEYS,params:{param:"signature",value:e.body.signature}}):t()):createError(e,a,{error:ERRORS.TRANSACTION.LOGIC.DECRYPTING_ERROR,params:{param:"signature",value:e.body.signature}})},validateTransactionApproval=(o,s,n)=>{if("true"===process.env.DISABLE_INTEGRITY_VALIDATION)return n();var{address:r}=o.params;const{approve:i}=o.query,d=o.query.signature||o.body.signature;return void 0===i?n():void 0===d?createError(o,s,{error:ERRORS.TRANSACTION.INPUT.MISSING_REQUIRED_INPUT,location:"query",params:{param:"signature",propertyName:"signature"}}):"true"!==i&&"false"!==i?createError(o,s,{error:ERRORS.TRANSACTION.INPUT.INCORRECT_INPUT,location:"query",params:{param:"approve",propertyName:"approve"}}):findByAddress(TYPE.TRANSACTION,r,!1,s).then(r=>{const e={approve:"true"===i};o.body.description&&(e.description=o.body.description);const a=getPublicKey(JSON.stringify(e),d);if(a){const t=[];return t.push(findByAddress(TYPE.USER,r.sender,!1,s)),"false"===i&&t.push(findByAddress(TYPE.USER,r.recipient,!1,s)),Promise.all(t).then(([r,e])=>(!e||e.public_key===a||r.public_key===a)&&(e||r.public_key===a)?n():createError(o,s,{error:ERRORS.TRANSACTION.LOGIC.NON_MATCHING_KEYS,location:"query",params:{param:"signature",value:o.params.signature}}))}return createError(o,s,{error:ERRORS.TRANSACTION.LOGIC.DECRYPTING_ERROR,location:"query",params:{param:"signature",value:o.params.signature}})})},validateTransactionUpdate=(t,o,s)=>{if("true"===process.env.DISABLE_INTEGRITY_VALIDATION)return s();var{address:r}=t.params,{approve:e}=t.query;const{description:n,signature:i}=t.body;return void 0!==e?s():void 0===i?createError(t,o,{error:ERRORS.TRANSACTION.INPUT.MISSING_REQUIRED_INPUT,location:"body",params:{param:"signature",propertyName:"signature"}}):void 0===n?createError(t,o,{error:ERRORS.TRANSACTION.INPUT.MISSING_REQUIRED_INPUT,location:"body",params:{param:"description",propertyName:"description"}}):findByAddress(TYPE.TRANSACTION,r,!1,o).then(r=>{const a=getPublicKey(JSON.stringify({description:n}),i);if(a){r=[findByAddress(TYPE.USER,r.creator,!1,o),findByAddress(TYPE.USER,r.sender,!1,o)];return Promise.all(r).then(([r,e])=>r.public_key!==a&&e.public_key!==a?createError(t,o,{error:ERRORS.TRANSACTION.LOGIC.NON_MATCHING_KEYS,params:{param:"signature",value:t.body.signature}}):s())}return createError(t,o,{error:ERRORS.TRANSACTION.LOGIC.DECRYPTING_ERROR,params:{param:"signature",value:t.body.signature}})})},validateTransactionUpdateRequest=[validatePendingTransaction,validateTransactionApproval,validateTransactionUpdate];module.exports.validateTransactionAddress=validateTransactionAddress,module.exports.validateTransactionUpdateRequest=validateTransactionUpdateRequest,module.exports.verifyPostTransaction=[(r,e,a)=>validateExistingTransaction(r,e,a,createAddress(r.body.signature,r.body.creationDate),!1,{location:"body"}),verifyPostTransaction,validateTransactionSignature],module.exports.inputValidation=inputValidation;