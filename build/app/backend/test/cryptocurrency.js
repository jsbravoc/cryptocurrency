/*! cryptocurrency 2021-05-07 */
const chai=require("chai"),should=chai.should(),_=require("lodash");chai.use(require("chai-http"));const{v4:uuidv4}=require("uuid"),API_URL=require("../app"),User=require("../models/User"),CRYPTO_ENDPOINT="/cryptocurrency",ENFORCER_ENDPOINT="/validate",USERS_ENDPOINT="/users",{expect}=chai,identifiers={W1000:uuidv4(),W0:uuidv4(),NoCoinbase:uuidv4(),CantTransferW1000:uuidv4(),ToDeleteW1000:uuidv4(),Inactive:uuidv4()},createdVariables={createdUserW1000:identifiers.W1000,createdUserW0:identifiers.W0,createdUserNoCoinbase:identifiers.NoCoinbase,createdUserCantTransferW1000:identifiers.CantTransferW1000,createdUserToDeleteW1000:identifiers.ToDeleteW1000,createdUserInactive:identifiers.Inactive,transactions:{user:{[identifiers.W1000]:{},[identifiers.W0]:{},[identifiers.NoCoinbase]:{},[identifiers.CantTransferW1000]:{},[identifiers.ToDeleteW1000]:{},[identifiers.Inactive]:{}},transaction:{[identifiers.W1000]:{},[identifiers.W0]:{},[identifiers.NoCoinbase]:{},[identifiers.CantTransferW1000]:{},[identifiers.ToDeleteW1000]:{},[identifiers.Inactive]:{}}}},createUser=({alias:r,coinbasePermission:e=!0,transferToPermissions:t=null,active:a=!0,returnTo:s=null,callback:o=null})=>{const i={};var n=identifiers[r];const c={address:n,public_key:n};return s&&(c.return_to=s),e&&(i.coinbase=!0),"boolean"==typeof a&&(c.active=a),t&&(i.transfer_to=t),c.permissions=i,chai.request(API_URL).post(`${USERS_ENDPOINT}`).send(c).end(function(e,t){return o({err:e,res:t,alias:r})}),!0},createTransaction=({recipientAlias:r,amount:a,pending:s,signature:e=null,senderAlias:o=null,creatorAlias:t=null,callback:i=null,valid_thru:n=null})=>{const c={recipient:identifiers[r]||r,amount:a,signature:null===e?uuidv4():e};return"boolean"==typeof s&&(c.pending=s),n&&(c.valid_thru=n),o&&(n=identifiers[o]||o,c.sender=n),t&&(t=identifiers[t]||t,c.creator=t),chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send(c).end(function(e,t){return i({err:e,res:t,recipientAlias:r,senderAlias:o,amount:a,pending:s,signature:c.signature})}),!0};describe("Cryptocurrency Test Suite",()=>{before(function(n){this.timeout(2e4);const i=({res:e,alias:t,callback:r})=>{const a=identifiers[t];return expect(e).to.satisfy(e=>(createdVariables.transactions.user[a]=e.body,201===e.statusCode&&(console.log(`[Before hook]: User ${t} created with address: ${a}`),r&&r(e),!0)))},c=({recipientAlias:t,senderAlias:r,amount:a,pending:s,signature:o,res:e,callback:i})=>{const n=identifiers[t],c=identifiers[r];return expect(e).to.satisfy(e=>(!r&&n?createdVariables.transactions.transaction[n].coinbase=e.body:"boolean"==typeof s&&c?createdVariables.transactions.transaction[c].pending=e.body:createdVariables.transactions.transaction[c][t]=e.body,201===e.statusCode&&(r?console.log(`[Before hook]: User ${r} sent${!0===s?" pending ":" "}transaction of ${a} CNKs to ${t}, with signature: ${o}`):console.log(`[Before hook]: User ${t} received ${a} CNKs, with signature: ${o}`),i&&i(e),!0)))};createUser({alias:"W1000",coinbasePermission:!0,callback:i}),createUser({alias:"W0",coinbasePermission:!0,callback:i}),createUser({alias:"NoCoinbase",coinbasePermission:!1,callback:i}),createUser({alias:"Inactive",coinbasePermission:!0,active:!1,callback:i}),createUser({alias:"CantTransferW1000",coinbasePermission:!0,transferToPermissions:{[identifiers.W1000]:!1},callback:i}),setTimeout(()=>{createTransaction({recipientAlias:"W1000",amount:1e3,callback:({err:e,res:t,recipientAlias:r,senderAlias:a,amount:s,signature:o})=>c({recipientAlias:r,senderAlias:a,amount:s,signature:o,err:e,res:t,callback:()=>setTimeout(()=>{createUser({alias:"ToDeleteW1000",coinbasePermission:!0,returnTo:{default:identifiers.W1000,inactive:identifiers.Inactive},callback:i}),createTransaction({recipientAlias:"CantTransferW1000",amount:1e3,callback:({err:e,res:t,recipientAlias:r,senderAlias:a,amount:s,signature:o})=>c({recipientAlias:r,senderAlias:a,amount:s,signature:o,err:e,res:t,callback:()=>{setTimeout(()=>{createTransaction({senderAlias:"CantTransferW1000",recipientAlias:"W0",amount:1,callback:c})},2500)}})}),createTransaction({recipientAlias:"W0",amount:600,pending:!0,senderAlias:"W1000",creatorAlias:"W1000",callback:({err:e,res:t,recipientAlias:r,senderAlias:a,amount:s,signature:o,pending:i})=>c({recipientAlias:r,senderAlias:a,amount:s,signature:o,pending:i,err:e,res:t,callback:()=>setTimeout(n,5e3)})})},2500)})})},2500)}),describe(`${CRYPTO_ENDPOINT} Tests`,()=>{describe(`GET ${CRYPTO_ENDPOINT}`,()=>{describe("Successful requests",()=>{describe("Get all transactions (non expanded)",()=>{it("Non expanded transactions should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.a("string")})}),r()})})}),describe("Get all transactions (expanded)",()=>{it("All transactions returned should be expanded",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({expanded:!0,limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object")})}),r()})})}),describe("Get all transactions (hide pending)",()=>{it("All transactions except those which are pending should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5,expanded:!0,hidePending:!0}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object"),e.pending&&expect(e.pending).to.equal(!1)})}),r()})})}),describe("Get all transactions (hide invalid)",()=>{it("All transactions except those which are invalid should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5,expanded:!0,hideInvalid:!0}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object"),expect(e.valid).to.equal(!0)})}),r()})})})})}),describe(`GET ${CRYPTO_ENDPOINT}/:address`,()=>{describe("Transaction error validations",()=>{describe("Value validation",()=>{it("Non existent transaction should throw an error",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty transaction signature should throw an error",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/      /`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("Transaction success validations",function(){before(e=>setTimeout(e),2500),it("Transaction should be retrieved successfully",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[identifiers.W1000].coinbase.payload.signature}`).end(function(e,t){expect(t).to.have.status(200),r()})}),it("Transaction should be retrieved and expanded successfully",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[identifiers.CantTransferW1000].W0.payload.signature}`).query({expanded:!0}).end(function(e,t){expect(t).to.have.status(200),(t.body.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object")}),r()})})})}),describe(`POST ${CRYPTO_ENDPOINT}`,()=>{describe("Transaction errors validations",()=>{describe("Empty values",()=>{it("Empty request should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty recipient should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,sender:"Anyone",signature:"Anything"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Empty amount should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Empty signature should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,signature:"",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"signature",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})}),describe("Value validation",()=>{it("Negative transaction amount should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:-10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Valid thru transaction date without ISO 8061 format should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,valid_thru:"2021-17-04",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"valid_thru",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Past valid thru transaction date should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,valid_thru:"2021-04-17T03:42:03.642Z",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"valid_thru",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})}),describe("Transaction validation",()=>{it("Already existing transaction with same signature should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,recipient:identifiers.W1000,signature:createdVariables.transactions.transaction[identifiers.CantTransferW1000].W0.payload.signature}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"signature",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Non existing sender should throw an error",t=>{createTransaction({senderAlias:uuidv4(),recipientAlias:"W1000",amount:10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"sender",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Non existing recipient should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:uuidv4(),amount:10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Inactive recipient should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"Inactive",amount:1,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Insufficient balance should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"W0",amount:1e308,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Insufficient balance due to pending transaction should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"W0",amount:650,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Coinbase transaction without permissions should throw an error",t=>{createTransaction({recipientAlias:"NoCoinbase",amount:650,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Transfer to explicitly denied recipient should throw an error",t=>{createTransaction({recipientAlias:"W1000",senderAlias:"CantTransferW1000",amount:100,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"sender",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})})}),describe("Transaction success validations",function(){this.slow(15e3),this.timeout(2e4),it("Transaction should be created successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",callback:({res:e})=>{expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.W0}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})}),it("Pending valid thru transaction should be created successfully",r=>{const e=new Date;e.setSeconds(e.getSeconds()+10),createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",valid_thru:e.toISOString(),pending:!0,callback:({res:e})=>{createdVariables.transactions.transaction[identifiers.W1000].expiringTransaction=e.body,expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.W0}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})}),it("Pending transaction should not change user's balance",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.W0}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})})})}),describe(`PUT ${CRYPTO_ENDPOINT}/:address`,()=>{describe("Transaction error validations",()=>{describe("Value validation",()=>{it("Non existent transaction should throw an error",r=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})}),describe("Transaction validation",()=>{it("Non pending transaction should throw an error",r=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[identifiers.W1000].coinbase.payload.signature}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("Transaction success validations",function(){this.slow(2e4),this.timeout(25e3),it("Transaction should be approved successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"ToDeleteW1000",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201);const t=e.body.payload;setTimeout(()=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${t.signature}`).query({approve:!0}).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${createdVariables.createdUserToDeleteW1000}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(1),r()})},3500)})},3500)}})}),it("Transaction should be rejected successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"NoCoinbase",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201);const t=e.body.payload;setTimeout(()=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${t.signature}`).query({approve:!1}).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.NoCoinbase}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(0),r()})},3500)})},3500)}})})})})}),describe(`${USERS_ENDPOINT} Tests`,()=>{describe(`GET ${USERS_ENDPOINT}`,()=>{describe("Successful requests",()=>{describe("Get all users (non expanded)",()=>{it("Non expanded users should be returned",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}`).query({limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),r()})})}),describe("Get all users (expanded)",()=>{it("All users returned should be expanded",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}`).query({expanded:!0,limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),r()})})})})}),describe(`GET ${USERS_ENDPOINT}/:address`,()=>{describe("User error validations",()=>{describe("Value validation",()=>{it("Non existent user should throw an error",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t).to.have.status(400),r()})}),it("Empty user address should throw an error",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/      /`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){it("User should be retrieved successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${createdVariables.createdUserW1000}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body).to.be.an("object"),r()})}),it("User should be retrieved and expanded successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${createdVariables.createdUserW1000}`).query({expanded:!0}).end(function(e,t){expect(t).to.have.status(200);new User(t.body);expect(t.body).to.be.an("object"),r()})})})}),describe(`POST ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Empty values",()=>{it("Empty request should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty address should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({public_key:uuidv4()}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Empty public_key should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4()}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"public_key",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("Value validation",()=>{it("Permission value that is not boolean should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:"TRUE"}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Nested permissions value (transfer_to) that is not boolean should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{transfer_to:{[identifiers.W1000]:["true"]}}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to value that is not string should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0},return_to:{default:[uuidv4()]}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Already existing user with same address should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:identifiers.W1000,public_key:identifiers.W1000}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to user that does not exist should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0},return_to:{default:uuidv4()}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be created successfully",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0}}).end(function(e,t){expect(t).to.have.status(201),r()})})})}),describe(`PUT ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Value validation",()=>{it("Permission value that is not boolean should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${identifiers.W1000}`).send({permissions:{coinbase:"TRUE"}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Nested permissions value (transfer_to) that is not boolean should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${identifiers.W1000}`).send({permissions:{transfer_to:{[identifiers.W1000]:["true"]}}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to value that is not string should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${identifiers.W1000}`).send({permissions:{coinbase:!0},return_to:{default:[uuidv4()]}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Non existing user should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${uuidv4()}`).send({permissions:{coinbase:!0}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"params"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to user that does not exist should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${identifiers.W1000}`).send({permissions:{coinbase:!0},return_to:{default:uuidv4()}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be updated successfully",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${identifiers.W1000}`).send({role:"New role"}).end(function(e,t){expect(t).to.have.status(200),r()})})})}),describe(`DELETE ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Value validation",()=>{it("Empty delete reason should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${identifiers.ToDeleteW1000}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Non existing user should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${uuidv4()}`).send({reason:"default"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"params"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Non existing delete reason should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${identifiers.ToDeleteW1000}`).send({reason:"undefined reason"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Inactive delete reason user should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${identifiers.ToDeleteW1000}`).send({reason:"inactive"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be deleted successfully",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${identifiers.ToDeleteW1000}`).send({reason:"default"}).end(function(e,t){expect(t).to.have.status(201),r()})})})})}),describe(`${ENFORCER_ENDPOINT} Tests`,()=>{describe(`GET ${ENFORCER_ENDPOINT}`,()=>{describe("Enforcer success validations",function(){it("Pending valid thru transaction should be deleted successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.W1000}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body.pending_transactions).to.be.an("array").that.does.include(createdVariables.transactions.transaction[identifiers.W1000].expiringTransaction.payload.signature),chai.request(API_URL).get(`${ENFORCER_ENDPOINT}/`).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${identifiers.W1000}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body.pending_transactions).to.be.an("array").that.does.not.include(createdVariables.transactions.transaction[identifiers.W1000].expiringTransaction.payload.signature),r()})},3500),r()})})})})})})});