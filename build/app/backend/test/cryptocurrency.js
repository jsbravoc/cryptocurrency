/*! cryptocurrency 2021-05-10 */
const chai=require("chai"),should=chai.should(),_=require("lodash");chai.use(require("chai-http"));const{randomBytes}=require("crypto"),{v4:uuidv4}=require("uuid"),API_URL=require("../app"),User=require("../models/User"),Transaction=require("../models/Transaction"),CRYPTO_ENDPOINT="/cryptocurrency",ENFORCER_ENDPOINT="/validate",USERS_ENDPOINT="/users",{expect}=chai,secp256k1=require("secp256k1"),ethers=require("ethers"),users={W1000:new User({address:uuidv4()}),W0:new User({address:uuidv4()}),NoCoinbase:new User({address:uuidv4()}),CantTransferW1000:new User({address:uuidv4()}),ToDeleteW1000:new User({address:uuidv4()}),Inactive:new User({address:uuidv4()})},createdVariables={transactions:{user:{[users.W1000.address]:{},[users.W0.address]:{},[users.NoCoinbase.address]:{},[users.CantTransferW1000.address]:{},[users.ToDeleteW1000.address]:{},[users.Inactive.address]:{}},transaction:{[users.W1000.address]:{},[users.W0.address]:{},[users.NoCoinbase.address]:{},[users.CantTransferW1000.address]:{},[users.ToDeleteW1000.address]:{},[users.Inactive.address]:{}}}};for(const a in users)if(Object.hasOwnProperty.call(users,a)){const b=users[a];let e;for(;e=randomBytes(32),!secp256k1.privateKeyVerify(e););const d=secp256k1.publicKeyCreate(e);b.public_key=Buffer.from(d).toString("hex"),b.private_key=Buffer.from(e).toString("hex"),console.log(b)}const getSignature=(e,t)=>{const r=new Transaction(t);t=r.toSignatureString(),e=e.private_key;try{var s="Ethereum Signed Message:\n"+t.length+t;const o=ethers.utils.keccak256("0x"+Buffer.from(s).toString("hex"));var a=secp256k1.ecdsaSign(Buffer.from(o.slice(2),"hex"),Buffer.from(e,"hex"));return"0x"+Buffer.from(a.signature).toString("hex")+(a.recid+27).toString(16)}catch(e){return new Error(e.message)}},createUser=({alias:r,coinbasePermission:e=!0,transferToPermissions:t=null,active:s=!0,returnTo:a=null,callback:o=null})=>{const n={};var{address:i,public_key:c}=users[r];const d={address:i,public_key:c};return a&&(d.return_to=a),e&&(n.coinbase=!0),"boolean"==typeof s&&(d.active=s),t&&(n.transfer_to=t),d.permissions=n,chai.request(API_URL).post(`${USERS_ENDPOINT}`).send(d).end(function(e,t){return o({err:e,res:t,alias:r})}),!0},createTransaction=({recipientAlias:r,amount:s,pending:a,signature:e=null,senderAlias:o=null,creatorAlias:t=null,callback:n=null,valid_thru:i=null})=>{var c;const d={recipient:users[r]?users[r].address:r,amount:s};"boolean"==typeof a&&(d.pending=a),i&&(d.valid_thru=i),o&&(c=users[o]?users[o].address:o,d.sender=c),t&&(c=users[t]?users[t].address:t,d.creator=c);let u;return users[t]?u=getSignature(users[t],d):users[o]?u=getSignature(users[o],d):users[r]&&(u=getSignature(users[r],d)),d.signature=u||e||uuidv4(),""===e&&(d.signature=""),chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send(d).end(function(e,t){return console.log(d),n({err:e,res:t,recipientAlias:r,senderAlias:o,amount:s,pending:a,signature:d.signature})}),!0};describe("Cryptocurrency Test Suite",()=>{before(function(i){this.timeout(2e4);const n=({res:e,alias:t,callback:r})=>{const s=users[t].address;return expect(e).to.satisfy(e=>(createdVariables.transactions.user[s]=e.body,201===e.statusCode&&(console.log(`[Before hook]: User ${t} created with address: ${s}`),r&&r(e),!0)))},c=({recipientAlias:t,senderAlias:r,amount:s,pending:a,signature:o,res:e,callback:n})=>{const i=users[t].address,c=users[r]?users[r].address:void 0;return expect(e).to.satisfy(e=>(!r&&i?createdVariables.transactions.transaction[i].coinbase=e.body:"boolean"==typeof a&&c?createdVariables.transactions.transaction[c].pending=e.body:createdVariables.transactions.transaction[c][t]=e.body,201===e.statusCode&&(r?console.log(`[Before hook]: User ${r} sent${!0===a?" pending ":" "}transaction of ${s} CNKs to ${t}, with signature: ${o}`):console.log(`[Before hook]: User ${t} received ${s} CNKs, with signature: ${o}`),n&&n(e),!0)))};createUser({alias:"W1000",coinbasePermission:!0,callback:n}),createUser({alias:"W0",coinbasePermission:!0,callback:n}),createUser({alias:"NoCoinbase",coinbasePermission:!1,callback:n}),createUser({alias:"Inactive",coinbasePermission:!0,active:!1,callback:n}),createUser({alias:"CantTransferW1000",coinbasePermission:!0,transferToPermissions:{[users.W1000.address]:!1},callback:n}),setTimeout(()=>{createTransaction({recipientAlias:"W1000",amount:1e3,callback:({err:e,res:t,recipientAlias:r,senderAlias:s,amount:a,signature:o})=>c({recipientAlias:r,senderAlias:s,amount:a,signature:o,err:e,res:t,callback:()=>setTimeout(()=>{createUser({alias:"ToDeleteW1000",coinbasePermission:!0,returnTo:{default:users.W1000.address,inactive:users.Inactive.address},callback:n}),createTransaction({recipientAlias:"CantTransferW1000",amount:1e3,callback:({err:e,res:t,recipientAlias:r,senderAlias:s,amount:a,signature:o})=>c({recipientAlias:r,senderAlias:s,amount:a,signature:o,err:e,res:t,callback:()=>{setTimeout(()=>{createTransaction({senderAlias:"CantTransferW1000",recipientAlias:"W0",amount:1,callback:c})},2500)}})}),createTransaction({recipientAlias:"W0",amount:600,pending:!0,senderAlias:"W1000",creatorAlias:"W1000",callback:({err:e,res:t,recipientAlias:r,senderAlias:s,amount:a,signature:o,pending:n})=>c({recipientAlias:r,senderAlias:s,amount:a,signature:o,pending:n,err:e,res:t,callback:()=>setTimeout(i,5e3)})})},2500)})})},2500)}),describe(`${CRYPTO_ENDPOINT} Tests`,()=>{describe(`GET ${CRYPTO_ENDPOINT}`,()=>{describe("Successful requests",()=>{describe("Get all transactions (non expanded)",()=>{it("Non expanded transactions should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.a("string")})}),r()})})}),describe("Get all transactions (expanded)",()=>{it("All transactions returned should be expanded",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({expanded:!0,limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object")})}),r()})})}),describe("Get all transactions (hide pending)",()=>{it("All transactions except those which are pending should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5,expanded:!0,hidePending:!0}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object"),e.pending&&expect(e.pending).to.equal(!1)})}),r()})})}),describe("Get all transactions (hide invalid)",()=>{it("All transactions except those which are invalid should be returned",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}`).query({limit:5,expanded:!0,hideInvalid:!0}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),t.body.forEach(e=>{(e.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object"),expect(e.valid).to.equal(!0)})}),r()})})})})}),describe(`GET ${CRYPTO_ENDPOINT}/:address`,()=>{describe("Transaction error validations",()=>{describe("Value validation",()=>{it("Non existent transaction should throw an error",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty transaction signature should throw an error",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/      /`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("Transaction success validations",function(){before(e=>setTimeout(e),2500),it("Transaction should be retrieved successfully",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[users.W1000.address].coinbase.payload.signature}`).end(function(e,t){expect(t).to.have.status(200),r()})}),it("Transaction should be retrieved and expanded successfully",r=>{chai.request(API_URL).get(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[users.CantTransferW1000.address].W0.payload.signature}`).query({expanded:!0}).end(function(e,t){expect(t).to.have.status(200),(t.body.supporting_transactions||[]).forEach(e=>{expect(e).to.be.an("object")}),r()})})})}),describe(`POST ${CRYPTO_ENDPOINT}`,()=>{describe("Transaction errors validations",()=>{describe("Empty values",()=>{it("Empty request should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty recipient should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,sender:"Anyone",signature:"Anything"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Empty amount should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Empty signature should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,signature:"",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"signature",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})}),describe("Value validation",()=>{it("Negative transaction amount should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:-10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Valid thru transaction date without ISO 8061 format should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,valid_thru:"2021-17-04",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"valid_thru",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Past valid thru transaction date should throw an error",t=>{createTransaction({senderAlias:"Anyone",recipientAlias:"Another User",amount:10,valid_thru:"2021-04-17T03:42:03.642Z",callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"valid_thru",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})}),describe("Transaction validation",()=>{it("Transaction signature that cannot be decrypted should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,recipient:users.W1000.address,signature:createdVariables.transactions.transaction[users.CantTransferW1000.address].W0.payload.signature+"1"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"signature",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Transaction signature that isn't signed by creator user throw an error",r=>{var e=getSignature(users.CantTransferW1000,{amount:10,recipient:users.W1000.address});chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,recipient:users.W1000.address,signature:e}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"signature",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Transaction signature that doesn't match with its contents throw an error",r=>{var e=getSignature(users.W1000,{amount:100,recipient:users.W1000.address});chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,recipient:users.W1000.address,signature:e}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"signature",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Already existing transaction with same signature should throw an error",r=>{chai.request(API_URL).post(`${CRYPTO_ENDPOINT}`).send({amount:10,recipient:users.W1000.address,signature:createdVariables.transactions.transaction[users.CantTransferW1000.address].W0.payload.signature}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"signature",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Non existing sender should throw an error",t=>{createTransaction({senderAlias:uuidv4(),recipientAlias:"W1000",amount:10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"sender",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Non existing recipient should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:uuidv4(),amount:10,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Inactive recipient should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"Inactive",amount:1,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Insufficient balance should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"W0",amount:1e308,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Insufficient balance due to pending transaction should throw an error",t=>{createTransaction({senderAlias:"W1000",recipientAlias:"W0",amount:650,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"amount",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Coinbase transaction without permissions should throw an error",t=>{createTransaction({recipientAlias:"NoCoinbase",amount:650,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"recipient",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})}),it("Transfer to explicitly denied recipient should throw an error",t=>{createTransaction({recipientAlias:"W1000",senderAlias:"CantTransferW1000",amount:100,callback:({res:e})=>{expect(e.body.errors).to.be.an("array"),expect(_.some(e.body.errors,{param:"sender",location:"body"})).to.be.true,expect(e).to.have.status(400),t()}})})})}),describe("Transaction success validations",function(){this.slow(15e3),this.timeout(2e4),it("Transaction should be created successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",callback:({res:e})=>{expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W0.address}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})}),it("Pending valid thru transaction should be created successfully",r=>{const e=new Date;e.setSeconds(e.getSeconds()+10),createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",valid_thru:e.toISOString(),pending:!0,callback:({res:e})=>{createdVariables.transactions.transaction[users.W1000.address].expiringTransaction=e.body,expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W0.address}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})}),it("Pending transaction should not change user's balance",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"W0",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W0.address}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(2),r()})},3500)}})})})}),describe(`PUT ${CRYPTO_ENDPOINT}/:address`,()=>{describe("Transaction error validations",()=>{describe("Value validation",()=>{it("Non existent transaction should throw an error",r=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})}),describe("Transaction validation",()=>{it("Non pending transaction should throw an error",r=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${createdVariables.transactions.transaction[users.W1000.address].coinbase.payload.signature}`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("Transaction success validations",function(){this.slow(2e4),this.timeout(25e3),it("Transaction should be approved successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"ToDeleteW1000",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201);const t=e.body.payload;setTimeout(()=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${t.signature}`).query({approve:!0}).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.ToDeleteW1000.address}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(1),r()})},3500)})},3500)}})}),it("Transaction should be rejected successfully",r=>{createTransaction({amount:1,senderAlias:"W1000",recipientAlias:"NoCoinbase",pending:!0,callback:({res:e})=>{expect(e).to.have.status(201);const t=e.body.payload;setTimeout(()=>{chai.request(API_URL).put(`${CRYPTO_ENDPOINT}/${t.signature}`).query({approve:!1}).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.NoCoinbase.address}`).end(function(e,t){expect(t).to.have.status(200),t.body.should.have.property("balance").equal(0),r()})},3500)})},3500)}})})})})}),describe(`${USERS_ENDPOINT} Tests`,()=>{describe(`GET ${USERS_ENDPOINT}`,()=>{describe("Successful requests",()=>{describe("Get all users (non expanded)",()=>{it("Non expanded users should be returned",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}`).query({limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),r()})})}),describe("Get all users (expanded)",()=>{it("All users returned should be expanded",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}`).query({expanded:!0,limit:5}).end(function(e,t){expect(t.body).to.be.an("array"),expect(t).to.have.status(200),r()})})})})}),describe(`GET ${USERS_ENDPOINT}/:address`,()=>{describe("User error validations",()=>{describe("Value validation",()=>{it("Non existent user should throw an error",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${uuidv4()}`).end(function(e,t){expect(t).to.have.status(400),r()})}),it("Empty user address should throw an error",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/      /`).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){it("User should be retrieved successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W1000.address}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body).to.be.an("object"),r()})}),it("User should be retrieved and expanded successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W1000.address}`).query({expanded:!0}).end(function(e,t){expect(t).to.have.status(200);new User(t.body);expect(t.body).to.be.an("object"),r()})})})}),describe(`POST ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Empty values",()=>{it("Empty request should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(t).to.have.status(400),r()})}),it("Empty address should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({public_key:uuidv4()}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Empty public_key should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4()}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"public_key",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("Value validation",()=>{it("Permission value that is not boolean should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:"TRUE"}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Nested permissions value (transfer_to) that is not boolean should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{transfer_to:{[users.W1000.address]:["true"]}}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to value that is not string should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0},return_to:{default:[uuidv4()]}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Already existing user with same address should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:users.W1000.address,public_key:users.W1000.address}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to user that does not exist should throw an error",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0},return_to:{default:uuidv4()}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be created successfully",r=>{chai.request(API_URL).post(`${USERS_ENDPOINT}`).send({address:uuidv4(),public_key:uuidv4(),permissions:{coinbase:!0}}).end(function(e,t){expect(t).to.have.status(201),r()})})})}),describe(`PUT ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Value validation",()=>{it("Permission value that is not boolean should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${users.W1000.address}`).send({permissions:{coinbase:"TRUE"}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Nested permissions value (transfer_to) that is not boolean should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${users.W1000.address}`).send({permissions:{transfer_to:{[users.W1000.address]:["true"]}}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"permissions",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to value that is not string should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${users.W1000.address}`).send({permissions:{coinbase:!0},return_to:{default:[uuidv4()]}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Non existing user should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${uuidv4()}`).send({permissions:{coinbase:!0}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"params"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Return_to user that does not exist should throw an error",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${users.W1000.address}`).send({permissions:{coinbase:!0},return_to:{default:uuidv4()}}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"return_to",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be updated successfully",r=>{chai.request(API_URL).put(`${USERS_ENDPOINT}/${users.W1000.address}`).send({role:"New role"}).end(function(e,t){expect(t).to.have.status(200),r()})})})}),describe(`DELETE ${USERS_ENDPOINT}`,()=>{describe("User errors validations",()=>{describe("Value validation",()=>{it("Empty delete reason should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${users.ToDeleteW1000.address}`).send({}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})}),describe("User validation",()=>{it("Non existing user should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${uuidv4()}`).send({reason:"default"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"address",location:"params"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Non existing delete reason should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${users.ToDeleteW1000.address}`).send({reason:"undefined reason"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})}),it("Inactive delete reason user should throw an error",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${users.ToDeleteW1000.address}`).send({reason:"inactive"}).end(function(e,t){expect(t.body.errors).to.be.an("array"),expect(_.some(t.body.errors,{param:"reason",location:"body"})).to.be.true,expect(t).to.have.status(400),r()})})})}),describe("User success validations",function(){this.slow(15e3),this.timeout(2e4),it("User should be deleted successfully",r=>{chai.request(API_URL).delete(`${USERS_ENDPOINT}/${users.ToDeleteW1000.address}`).send({reason:"default"}).end(function(e,t){expect(t).to.have.status(201),r()})})})})}),describe(`${ENFORCER_ENDPOINT} Tests`,()=>{describe(`GET ${ENFORCER_ENDPOINT}`,()=>{describe("Enforcer success validations",function(){it("Pending valid thru transaction should be deleted successfully",r=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W1000.address}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body.pending_transactions).to.be.an("array").that.does.include(createdVariables.transactions.transaction[users.W1000.address].expiringTransaction.payload.signature),chai.request(API_URL).get(`${ENFORCER_ENDPOINT}/`).end(function(e,t){expect(t).to.have.status(200),setTimeout(()=>{chai.request(API_URL).get(`${USERS_ENDPOINT}/${users.W1000.address}`).end(function(e,t){expect(t).to.have.status(200),expect(t.body.pending_transactions).to.be.an("array").that.does.not.include(createdVariables.transactions.transaction[users.W1000.address].expiringTransaction.payload.signature),r()})},3500),r()})})})})})})});