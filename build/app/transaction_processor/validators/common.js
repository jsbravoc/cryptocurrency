const{getUserAddress,getTransactionAddress,getRawState}=require("../controllers/common"),{TYPE}=require("../utils/constants"),{ERRORS}=require("../utils/errors"),{logFormatted,SEVERITY}=require("../utils/logger"),validateObjExistence=(e,R,a,S)=>{let t;switch(a=(a+"").trim(),R){case TYPE.TRANSACTION:t=getTransactionAddress;break;case TYPE.USER:t=getUserAddress}return getRawState(e,t(a),5e3).then(e=>{e=null!==e?JSON.parse(Buffer.from(e,"utf8").toString()):e;var t=S&&null===e,r=!S&&null!==e;if(t||r){var s=`${R.toProperCase()} with address {${a}} ${t?"does not":"already"} exist${t?"":"s"}`;logFormatted(s,SEVERITY.ERROR);let e;switch(R){case TYPE.TRANSACTION:t?e=ERRORS.TRANSACTION.INPUT.TRANSACTION_DOES_NOT_EXIST:r&&(e=ERRORS.TRANSACTION.INPUT.TRANSACTION_EXISTS);break;case TYPE.USER:t?e=ERRORS.USER.INPUT.USER_DOES_NOT_EXIST:r&&(e=ERRORS.USER.INPUT.USER_EXISTS)}return Promise.reject(e)}return Promise.resolve(e)}).catch(e=>(console.log("Catched rejection from getRawState",e),Promise.reject(e)))};module.exports.validateObjExistence=validateObjExistence;